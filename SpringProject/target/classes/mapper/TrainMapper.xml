<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- CommentMapper.xml -->
<mapper namespace="mapper.TrainMapper">
	<cache />
	<resultMap type="Model.TrainStatinDTO" id="baseResultMap">
		<id column="STATION_CODE" jdbcType="VARCHAR" property="stationTimeCode" />
		<result column="STATION_NAME" jdbcType="VARCHAR" property="stationName" />
	</resultMap>
	<resultMap type="Model.TrainStationTimeDTO" id="trainStationTimeDTO">
		<result column="STATION_TIME_CODE" jdbcType="VARCHAR" property="stationTimeCode" />
		<result column="STATION_CODE" jdbcType="VARCHAR" property="stationTimeCode" />
		<result column="TRAIN_CODE" jdbcType="BIGINT" property="trainCode" />
		<result column="TIME" jdbcType="VARCHAR" property="time" />
	</resultMap>
	<resultMap type="Model.TrainDTO" id="coustomListMap">
		<result column="TRAIN_CODE" jdbcType="BIGINT" property="trainCode" />
		<result column="SERVICE_DATE" jdbcType="VARCHAR" property="serviceDate" />
		<result column="TRAIN_NAME" jdbcType="VARCHAR" property="trainName" />
		<result column="TIME" jdbcType="VARCHAR" property="time" />
		<result column="STATION_NAME" jdbcType="VARCHAR" property="stationName" />
	</resultMap>
	<resultMap type="Model.TrainRegistrationDTO" id="infoListMap">
		<result column="TRAIN_REG_CODE" jdbcType="VARCHAR" property="trainRegCode" />
		<result column="TRAIN_CODE" jdbcType="BIGINT" property="trainCode" />
		<result column="SEAT_NUM" jdbcType="VARCHAR" property="seatNum" />
		<result column="MEMBER_ID" jdbcType="VARCHAR" property="memberId" />
		<result column="DEPARTING_STATION" jdbcType="VARCHAR" property="departingStation" />
		<result column="ARRIVAL_STATION" jdbcType="VARCHAR" property="arrivalStation" />
		<result column="TRAIN_DATE" jdbcType="VARCHAR" property="trainDate" />
		<result column="TRAIN_NAME" jdbcType="VARCHAR" property="trainName" />
		<result column="TRAIN_PASSENGERS" jdbcType="VARCHAR" property="trainPassengers" />
		<collection property="trainStationTimeDTO" resultMap="trainStationTimeDTO"></collection>
		<collection property="trainPurchaseDTO" resultMap="PurchaseMap"></collection>
	</resultMap>
	<resultMap type="Model.TrainPurchaseDTO" id="PurchaseMap">
		<result column="TRAIN_PURCHASE_CODE" jdbcType="VARCHAR"
			property="trainPurchaseCode" />
		<result column="TRAIN_REG_CODE" jdbcType="VARCHAR" property="trainRegCode" />
		<result column="TRAIN_CODE" jdbcType="BIGINT" property="trainCode" />
		<result column="INVOICE" jdbcType="VARCHAR" property="invoice" />
		<result column="TRAIN_REFUND" jdbcType="BIGINT" property="trainRefund" />
		<result column="MEMBER_ID" jdbcType="VARCHAR" property="memberId" />
		<result column="TRAIN_PUB_DATE" jdbcType="VARCHAR" property="trainPubDate" />
	</resultMap>

	<select id="selectSearchStation" resultMap="baseResultMap">
		select
		STATION_NAME
		FROM
		TRAIN_STATION
	</select>
	<select id="selectCustomerTrain" resultMap="coustomListMap"
		parameterType="java.util.HashMap">

		select t.train_CODE,INSTR(t.SERVICE_DATE,#{dateTrain})
		SERVICE_DATE,t.TRAIN_NAME,substr(xmlagg(xmlelement(a,',' ||
		st.time)order by st.time ).extract('//text()'),2) time,
		substr(xmlagg(xmlelement(a,',' ||ts.STATION_NAME) order by st.time
		).extract('//text()'),2) STATION_NAME from train t
		inner join
		station_time st on t.TRAIN_CODE = st.TRAIN_CODE inner join
		train_station ts on st.STATION_CODE = ts.STATION_CODE
		where
		<choose>
			<when test="station.size != 0">
				ts.STATION_NAME in
				<foreach collection="station" item="item" index="index"
					separator="," open="(" close=")">
					#{item}
				</foreach>
			</when>
		</choose>

		<choose>
			<when test="trainType.size != 0">
				and t.train_name in
				<foreach collection="trainType" item="item" index="index"
					separator="," open="(" close=")">
					#{item}
				</foreach>
				and
			</when>
		</choose>
	
		<![CDATA[ 
		to_date('00:00','HH24:MI')< to_date(st.time,'HH24:MI')]]>
		and
		<choose>
			<when test="station.size != 0">
				t.train_code in (select st.train_CODE from station_time st inner
				join
				train_station ts on st.STATION_CODE = ts.STATION_CODE
				where
				ts.STATION_NAME in
				<foreach collection="station" item="item" index="index"
					separator="," open="(" close=")">
					#{item}
				</foreach>
			</when>
		</choose>
		and t.train_name = 'KTX' and<![CDATA[ 
		to_date('00:00','HH24:MI')< to_date(st.time,'HH24:MI') ]]>group
		by st.train_CODE having count(*) >1 )
		group by t.train_CODE,
		t.TRAIN_NAME,t.SERVICE_DATE order by train_code ASC

	</select>


	<select id="selectTrainInfo" parameterType="java.util.HashMap"
		resultMap="infoListMap">
		select tr.TRAIN_CODE,tr.SEAT_NUM from
		TRAIN_REGISTRATION tr join TRAIN_PURCHASE tp on tr.TRAIN_REG_CODE = tp.TRAIN_REG_CODE join 
		STATION_TIME st on tp.TRAIN_CODE = st.TRAIN_CODE join
		TRAIN_STATION ts
		on st.STATION_CODE = ts.STATION_CODE 
		where tr.TRAIN_CODE = #{trainCode}
		AND tr.TRAIN_DATE =
		TO_DATE(#{dateTrain}, 'yyyy-MM-dd') and TRAIN_REFUND = 0
		and <![CDATA[ TO_DATE(#{sTime},'hh24:mi')<=TO_DATE(st.TIME,'hh24:mi') AND TO_DATE(#{eTime},'hh24:mi')>=TO_DATE(st.TIME,'hh24:mi') ]]>
		group by tr.TRAIN_CODE, tr.SEAT_NUM
	</select>


	<insert id="trainRegCode" parameterType="Model.TrainRegistrationDTO">
		INSERT INTO TRAIN_REGISTRATION
		(TRAIN_REG_CODE,TRAIN_CODE,SEAT_NUM,MEMBER_ID,DEPARTING_STATION,ARRIVAL_STATION,TRAIN_DATE,TRAIN_PASSENGERS,TRAIN_NAME)
		VALUES
		('A'||train_nn.NEXTVAL,#{trainCode},#{seatNum},#{memberId},#{departingStation},#{arrivalStation},#{trainDate},#{trainPassengers},#{trainName})
		<selectKey keyProperty="trainRegCode" resultType="java.lang.String"
			order="AFTER"> SELECT train_nn.currval FROM dual </selectKey>
	</insert>

	<insert id="insertPurchase" parameterType="Model.TrainPurchaseDTO">
		INSERT INTO
		TRAIN_PURCHASE
		(TRAIN_PURCHASE_CODE,TRAIN_REG_CODE,TRAIN_CODE,INVOICE,MEMBER_ID,TRAIN_PUB_DATE)
		VALUES
		('B'||train_pub.NEXTVAL,#{trainRegCode},#{trainCode},#{invoice},#{memberId},#{trainPubDate})

	</insert>
	<select id="selectTicketPurchase" parameterType="java.util.Map"
		resultMap="infoListMap">
		select * from train_purchase tp join
		TRAIN_REGISTRATION tr on
		tp.TRAIN_REG_CODE = tr.TRAIN_REG_CODE where tr.MEMBER_ID= #{memberId} and tp.TRAIN_REFUND = 0
	</select>
	<select id="selectTicketD" resultMap="infoListMap"
		parameterType="java.util.Map">
		select tp.TRAIN_REG_CODE,tp.TRAIN_PUB_DATE, tr.DEPARTING_STATION,
		tr.ARRIVAL_STATION,substr(xmlagg(xmlelement(a,',' ||st.time)order by st.time ).extract('//text()'),2) time,
		tr.TRAIN_NAME,tr.TRAIN_CODE,tr.SEAT_NUM,tr.TRAIN_PASSENGERS,tp.INVOICE from
		TRAIN_REGISTRATION tr join TRAIN_PURCHASE tp on tr.TRAIN_CODE =
		tp.TRAIN_CODE join STATION_TIME st on st.TRAIN_CODE = tp.TRAIN_CODE
		join TRAIN_STATION ts on st.STATION_CODE = ts.STATION_CODE where 
		tr.TRAIN_REG_CODE = #{TrainRegCode} and ts.STATION_NAME in 
		<foreach collection="station" item="item" index="index"
					separator="," open="(" close=")">
					#{item}
		</foreach>
		 group by
		tp.TRAIN_REG_CODE,tp.TRAIN_PUB_DATE, tr.DEPARTING_STATION, tr.ARRIVAL_STATION,
		tr.TRAIN_NAME, tr.TRAIN_CODE,
		tr.SEAT_NUM, tr.TRAIN_PASSENGERS, tp.INVOICE
	</select>
	
	<select id="selectUseHistory" resultMap="infoListMap" parameterType="java.util.Map">
		select TO_DATE(tp.TRAIN_PUB_DATE,'yyyy-MM-dd') as TRAIN_PUB_DATE,tp.TRAIN_CODE,tr.DEPARTING_STATION,tr.ARRIVAL_STATION,tp.INVOICE,tp.TRAIN_REFUND from TRAIN_REGISTRATION tr  join TRAIN_PURCHASE tp on tr.TRAIN_REG_CODE = tp.TRAIN_REG_CODE 
        where<![CDATA[ TO_DATE(tp.TRAIN_PUB_DATE,'yyyy-MM-dd') >= TO_DATE(#{date1},'yyyy-MM-dd') 
        and TO_DATE(tp.TRAIN_PUB_DATE,'yyyy-MM-dd') <= TO_DATE(#{date2},'yyyy-MM-dd') ]]> and tp.member_id = #{memberId}
	</select>
	<update id="updetePurchase" parameterType="String">
		update TRAIN_PURCHASE set TRAIN_REFUND = 1 where TRAIN_REG_CODE = #{code}
	</update>
	
	<update id="updateSeat" parameterType="java.util.Map">
		update TRAIN_REGISTRATION set SEAT_NUM = #{seat} where TRAIN_REG_CODE = #{code}
	</update>
</mapper>